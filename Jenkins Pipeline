// This is a declarative Jenkins Pipeline for a Python project.
// It uses a Docker agent to ensure a consistent build environment.

pipeline {
// The agent directive specifies where the pipeline will run.
// Using a Docker image for a specific Python version ensures
// the environment is consistent and reproducible.
agent {
docker {
image 'python:3.9-slim'
}
}

// The `stages` block contains the different stages of our CI/CD process.
stages {
    // Stage 1: Build
    // This stage installs the required Python dependencies.
    stage('Build') {
        steps {
            echo 'Building the project...'
            sh 'pip install -r requirements.txt'
        }
    }

    // Stage 2: Test
    // This stage runs the unit tests using pytest.
    stage('Test') {
        steps {
            echo 'Running tests...'
            sh 'pytest'
        }
    }

    // Stage 3: Deploy
    // This stage simulates the deployment process.
    // In a real-world scenario, this would contain commands
    // to deploy the application to a server (e.g., via SSH,
    // Docker, Kubernetes, etc.).
    stage('Deploy') {
        steps {
            echo 'Deploying the application...'
            // A placeholder for a real deployment script or command.
            sh 'echo "Deployment successful!"'
        }
    }
}

// The `post` block defines actions to be executed after the pipeline completes.
post {
    always {
        // This step is always executed, regardless of the build result.
        echo 'Pipeline finished.'
    }
    success {
        echo 'All stages completed successfully!'
    }
    failure {
        echo 'Pipeline failed. Check the logs for details.'
    }
}

}
